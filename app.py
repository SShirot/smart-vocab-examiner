import streamlit as st
import json
import random
import re
import google.generativeai as genai
from streamlit.components.v1 import html
import logging
from datetime import datetime

# ========== LOGGING CONFIG ==========
def setup_logger():
    """C·∫•u h√¨nh logging cho ·ª©ng d·ª•ng"""
    log_filename = f"logs/app_{datetime.now().strftime('%Y%m')}.log"
    
    # T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
    import os
    os.makedirs('logs', exist_ok=True)
    
    # C·∫•u h√¨nh logging
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(levelname)s - %(message)s',
        handlers=[
            logging.FileHandler(log_filename, encoding='utf-8'),
            logging.StreamHandler()
        ]
    )
    return logging.getLogger(__name__)

# Kh·ªüi t·∫°o logger
logger = setup_logger()

# ========== CONFIG & SECURITY WARNING ==========
st.set_page_config(page_title="üß† Smart Vocab Quiz", layout="centered", initial_sidebar_state="auto")
st.title("üß† Smart Vocabulary Quiz")

# C·∫¢NH B√ÅO B·∫¢O M·∫¨T: Kh√¥ng bao gi·ªù hardcode API key v√†o m√£ ngu·ªìn.
# S·ª≠ d·ª•ng Streamlit Secrets ƒë·ªÉ b·∫£o m·∫≠t.
# 1. T·∫°o file .streamlit/secrets.toml
# 2. Th√™m v√†o file ƒë√≥:
#    GEMINI_API_KEY = "AIzaSy...your_real_key"
try:
    API_KEY = st.secrets["GEMINI_API_KEY"]
    genai.configure(api_key=API_KEY)
    # C·∫≠p nh·∫≠t t√™n model th√†nh phi√™n b·∫£n m·ªõi v√† ·ªïn ƒë·ªãnh
    model = genai.GenerativeModel("gemini-2.5-flash-lite-preview-06-17")
except (KeyError, FileNotFoundError):
    st.error("üö® L·ªói: Vui l√≤ng c·∫•u h√¨nh GEMINI_API_KEY trong Streamlit Secrets.")
    st.info("T·∫°o m·ªôt th∆∞ m·ª•c `.streamlit` trong project c·ªßa b·∫°n, trong ƒë√≥ t·∫°o file `secrets.toml` v√† th√™m `GEMINI_API_KEY = 'your_key_here'` v√†o ƒë√≥.")
    st.stop()

def auto_focus_input():
    """H√†m t·∫°o JavaScript ƒë·ªÉ t·ª± ƒë·ªông focus v√†o input field v√† x·ª≠ l√Ω ph√≠m Enter"""
    js_code = """
        <script>
            function focusInput() {
                // T√¨m t·∫•t c·∫£ c√°c input field
                var inputs = window.parent.document.getElementsByTagName('input');
                // Focus v√†o input field cu·ªëi c√πng (input answer c·ªßa quiz)
                if (inputs.length > 0) {
                    inputs[inputs.length - 1].focus();
                }
            }

            function focusNextButton() {
                // T√¨m n√∫t Next Question
                var buttons = window.parent.document.getElementsByTagName('button');
                for (var i = 0; i < buttons.length; i++) {
                    if (buttons[i].innerText.includes('Next Question')) {
                        buttons[i].focus();
                        // Th√™m event listener cho ph√≠m Enter
                        window.parent.document.addEventListener('keydown', function(e) {
                            if (e.key === 'Enter' && document.activeElement === buttons[i]) {
                                buttons[i].click();
                                // Sau khi click, ƒë·ª£i m·ªôt ch√∫t ƒë·ªÉ trang reload v√† focus l·∫°i v√†o input
                                setTimeout(focusInput, 100);
                            }
                        });
                        break;
                    }
                }
            }

            // Ki·ªÉm tra xem c√≥ feedback kh√¥ng (ƒë√£ submit c√¢u tr·∫£ l·ªùi ch∆∞a)
            var feedbackElements = window.parent.document.getElementsByClassName('stMarkdown');
            var hasFeedback = false;
            for (var i = 0; i < feedbackElements.length; i++) {
                if (feedbackElements[i].innerText.includes('‚úÖ') || feedbackElements[i].innerText.includes('‚ùå')) {
                    hasFeedback = true;
                    break;
                }
            }

            // N·∫øu c√≥ feedback th√¨ focus v√†o n√∫t Next, kh√¥ng th√¨ focus v√†o input
            setTimeout(function() {
                if (hasFeedback) {
                    focusNextButton();
                } else {
                    focusInput();
                }
            }, 100);
        </script>
    """
    return html(js_code)

# ========== HELPER FUNCTIONS ==========

def convert_txt_to_json(txt_string):
    """Chuy·ªÉn ƒë·ªïi m·ªôt chu·ªói text c√≥ ƒë·ªãnh d·∫°ng sang c·∫•u tr√∫c JSON."""
    vocab_list = []
    # Regex ƒë∆∞·ª£c c·∫£i thi·ªán ƒë·ªÉ linh ho·∫°t h∆°n v·ªõi kho·∫£ng tr·∫Øng
    # "word" (type) : "meaning"
    pattern = re.compile(r'["\']?(.+?)["\']?\s+\((.+?)\)\s*:\s*["\']?(.+?)["\']?$')
    for line in txt_string.strip().split("\n"):
        match = pattern.match(line.strip())
        if match:
            vocab_list.append({
                "word": match.group(1).strip(),
                "type": match.group(2).strip(),
                "meaning": match.group(3).strip()
            })
    return vocab_list

def convert_json_to_txt(vocab_list):
    """Chuy·ªÉn ƒë·ªïi danh s√°ch t·ª´ v·ª±ng t·ª´ JSON sang ƒë·ªãnh d·∫°ng text."""
    txt_lines = []
    for item in vocab_list:
        txt_lines.append(f'"{item["word"]}" ({item["type"]}) : "{item["meaning"]}"')
    return "\n".join(txt_lines)

def start_quiz(vocab_data):
    """Kh·ªüi t·∫°o ho·∫∑c reset tr·∫°ng th√°i session ƒë·ªÉ b·∫Øt ƒë·∫ßu quiz."""
    if not vocab_data:
        logger.warning("Attempted to start quiz with no vocabulary data")
        st.error("‚ö†Ô∏è Kh√¥ng th·ªÉ b·∫Øt ƒë·∫ßu quiz. Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu t·ª´ v·ª±ng.")
        return
    
    logger.info(f"Starting new quiz with {len(vocab_data)} words")
    random.shuffle(vocab_data)
    st.session_state.vocab = vocab_data
    st.session_state.index = 0
    st.session_state.feedback = ""
    st.session_state.sentence = ""
    st.session_state.direction = random.choice(["en-vi", "vi-en"])
    st.session_state.user_input = ""
    st.session_state.correct_answers = 0
    st.rerun()

# ========== GEMINI API FUNCTIONS ==========

def generate_vocab_with_gemini(topic, characteristics):
    """T·∫°o danh s√°ch t·ª´ v·ª±ng b·∫±ng Gemini theo ƒë·ªãnh d·∫°ng y√™u c·∫ßu."""
    logger.info(f"Generating vocabulary list - Topic: {topic}, Characteristics: {characteristics}")
    
    # Prompt ƒë∆∞·ª£c thi·∫øt k·∫ø c·ª±c k·ª≥ nghi√™m ng·∫∑t ƒë·ªÉ ƒë·∫£m b·∫£o ƒë·ªãnh d·∫°ng ƒë·∫ßu ra
    prompt = f"""
    You are an API that generates vocabulary lists.
    Your task is to create a list of vocabulary words based on the user's request, default is 15-20 words.
    You MUST follow this format for EACH line EXACTLY:
    "English Word" (type) : "Vietnamese Meaning"

    Valid types are: n, v, adj, adv, prep, phr, phr. v.

    DO NOT include any headers, footers, explanations, or any text other than the vocabulary list itself.

    ---
    User's Request:
    Topic: {topic}
    Characteristics: {characteristics}
    ---
    """
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        st.error(f"‚ö†Ô∏è L·ªói khi g·ªçi Gemini API: {str(e)}")
        return None

def check_meaning_with_gemini(question, user_answer, correct_answer, word_type, direction):
    """Ki·ªÉm tra c√¢u tr·∫£ l·ªùi c·ªßa ng∆∞·ªùi d√πng v√† ƒë∆∞a ra gi·∫£i th√≠ch."""
    logger.info(f"Checking answer - Question: {question}, User Answer: {user_answer}, Direction: {direction}")
    explanation_lang = "Ti·∫øng Vi·ªát" if direction == "en-vi" else "English"
    meaning_from = "Ti·∫øng Anh" if direction == "en-vi" else "Ti·∫øng Vi·ªát"
    meaning_to = "Ti·∫øng Vi·ªát" if direction == "en-vi" else "English"

    prompt = f"""
    Evaluate a vocabulary quiz answer.
    The user is translating from {meaning_from} to {meaning_to}.
    - Question word: '{question}'
    - Correct answer: '{correct_answer}'
    - User's answer: '{user_answer}'

    First, on a single line, respond with only "YES" if the user's answer is correct or a reasonable synonym, and "NO" otherwise.
    Then, on a new line, provide a brief, helpful explanation in {explanation_lang}.
    """
    try:
        response = model.generate_content(prompt)
        text = response.text.strip()
        parts = text.split('\n', 1)
        is_correct = parts[0].strip().upper() == "YES"
        explanation = parts[1].strip() if len(parts) > 1 else "No explanation provided."
        return is_correct, explanation
    except Exception as e:
        return False, f"‚ö†Ô∏è L·ªói khi ki·ªÉm tra v·ªõi Gemini: {str(e)}"

def generate_example_sentence(word, word_type, meaning):
    """T·∫°o c√¢u v√≠ d·ª• cho m·ªôt t·ª´ v·ª±ng."""
    prompt = f"Write one short, clear English sentence using the word '{word}' ({word_type}) which means '{meaning}' in Vietnamese."
    try:
        response = model.generate_content(prompt)
        return response.text.strip()
    except Exception as e:
        return f"‚ö†Ô∏è L·ªói khi t·∫°o c√¢u: {str(e)}"

# ========== STREAMLIT UI & LOGIC ==========

# N·∫øu quiz ƒëang di·ªÖn ra, kh√¥ng hi·ªÉn th·ªã m√†n h√¨nh b·∫Øt ƒë·∫ßu
if "vocab" not in st.session_state:
    tab1, tab2 = st.tabs(["‚ú® Generate with AI", "üì§ Upload a File"])

    with tab1:
        st.subheader("Generate a new vocabulary list")
        with st.form("generate_form"):
            topic = st.text_input("Topic", placeholder="e.g., Technology, Environment, Business")
            characteristics = st.text_input("Characteristics", placeholder="e.g., IELTS Band 7.0, Formal, Common Phrasal Verbs")
            submitted = st.form_submit_button("üöÄ Generate & Start Quiz")

            if submitted:
                if not topic or not characteristics:
                    logger.warning("Form submitted with empty fields")
                    st.warning("Please fill in both Topic and Characteristics.")
                else:
                    logger.info(f"New quiz generation requested - Topic: {topic}, Characteristics: {characteristics}")
                    with st.spinner("üß† Gemini is thinking... Please wait."):
                        generated_txt = generate_vocab_with_gemini(topic, characteristics)
                    
                    if generated_txt:
                        vocab_data = convert_txt_to_json(generated_txt)
                        if vocab_data:
                            st.success(f"Generated {len(vocab_data)} words! Starting quiz...")
                            start_quiz(vocab_data)
                        else:
                            st.error("Could not parse the generated text. Please try again.")

    with tab2:
        st.subheader("Upload your own vocabulary file")
        uploaded_file = st.file_uploader("Upload a .txt file (format: word (type): meaning)", type=["txt"])
        if uploaded_file:
            content = uploaded_file.read().decode("utf-8")
            vocab_data = convert_txt_to_json(content)
            if vocab_data:
                st.success(f"Loaded {len(vocab_data)} words from your file!")
                if st.button("‚ñ∂Ô∏è Start Quiz with this file"):
                    start_quiz(vocab_data)
            else:
                st.error("‚ö†Ô∏è Invalid format in the uploaded file. Please use: word (type): meaning")
else:
    # ========== QUIZ INTERFACE ==========
    if st.session_state.index >= len(st.session_state.vocab):
        final_score = st.session_state.correct_answers
        total_questions = len(st.session_state.vocab)
        score_percentage = (final_score / total_questions) * 100
        logger.info(f"Quiz completed - Final Score: {final_score}/{total_questions} ({score_percentage:.1f}%)")
        
        st.success("üéâ You've completed the quiz! Well done!")
        st.balloons()  # Th√™m hi·ªáu ·ª©ng b√≥ng bay khi ho√†n th√†nh
        
        # Hi·ªÉn th·ªã ƒëi·ªÉm s·ªë cu·ªëi c√πng
        st.markdown(f"""
        ### üìä Your Final Score:
        - **Correct Answers:** {final_score}/{total_questions}
        - **Score:** {score_percentage:.1f}%
        """)
        
        # ƒê√°nh gi√° k·∫øt qu·∫£
        if score_percentage >= 90:
            st.success("üåü Excellent! Outstanding performance!")
        elif score_percentage >= 70:
            st.success("üëè Good job! Keep up the good work!")
        elif score_percentage >= 50:
            st.info("üí™ Not bad! Keep practicing to improve!")
        else:
            st.warning("üìö More practice needed. Don't give up!")
        
        # Add download button
        vocab_text = convert_json_to_txt(st.session_state.vocab)
        st.download_button(
            label="üì• Download Vocabulary List",
            data=vocab_text,
            file_name="vocabulary_list.txt",
            mime="text/plain"
        )
        
        if st.button("üîÅ Restart Quiz"):
            # Ch·ªâ reset l·∫°i index v√† c√°c tr·∫°ng th√°i li√™n quan ƒë·ªÉ b·∫Øt ƒë·∫ßu l·∫°i
            start_quiz(st.session_state.vocab)
        if st.button("üè† Back to Home"):
            # X√≥a to√†n b·ªô session state ƒë·ªÉ quay v·ªÅ m√†n h√¨nh ch√≠nh
            for key in list(st.session_state.keys()):
                del st.session_state[key]
            st.rerun()
        st.stop()

    # Add Back button
    if st.button("üè† Back to Home", key="back_button"):
        for key in list(st.session_state.keys()):
            del st.session_state[key]
        st.rerun()

    # Progress bar and score display during quiz
    col1, col2 = st.columns([2, 1])
    with col1:
        progress = (st.session_state.index + 1) / len(st.session_state.vocab)
        st.progress(progress, text=f"Question {st.session_state.index + 1} of {len(st.session_state.vocab)}")
    with col2:
        current_score = st.session_state.correct_answers
        total_so_far = st.session_state.index
        if total_so_far > 0:
            current_percentage = (current_score / total_so_far) * 100
            st.markdown(f"**Score:** {current_score}/{total_so_far} ({current_percentage:.1f}%)")
        else:
            st.markdown("**Score:** 0/0 (0%)")
    
    q = st.session_state.vocab[st.session_state.index]
    direction = st.session_state.direction

    if direction == "en-vi":
        prompt_question = q["word"]
        correct_answer = q["meaning"]
        st.subheader(f"Translate to Vietnamese: **{q['word']}** ({q['type']})")
    else:
        prompt_question = q["meaning"]
        correct_answer = q["word"]
        st.subheader(f"Translate to English: **{q['meaning']}** ({q['type']})")

    with st.form(key=f"answer_form_{st.session_state.index}"):
        user_input = st.text_input("Your answer:", key=f"input_{st.session_state.index}")
        submit_button = st.form_submit_button("‚úîÔ∏è Check Answer")

    if submit_button:
        if not user_input:
            logger.warning(f"Empty answer submitted for question {st.session_state.index + 1}")
            st.warning("Please enter an answer.")
        else:
            with st.spinner("Checking..."):
                is_correct, explanation = check_meaning_with_gemini(prompt_question, user_input, correct_answer, q["type"], direction)
            
            if is_correct:
                logger.info(f"Correct answer - Question {st.session_state.index + 1}: {prompt_question}")
                st.session_state.feedback = f"‚úÖ Correct! \n\n{explanation}"
                st.session_state.correct_answers += 1 # TƒÉng bi·∫øn ƒë·∫øm s·ªë c√¢u ƒë√∫ng
            else:
                logger.info(f"Incorrect answer - Question {st.session_state.index + 1}: {prompt_question}, User Answer: {user_input}, Correct Answer: {correct_answer}")
                st.session_state.feedback = f"‚ùå Incorrect. The correct answer is: **{correct_answer}**\n\n{explanation}"
            
            # T·ª± ƒë·ªông t·∫°o c√¢u v√≠ d·ª• n·∫øu tr·∫£ l·ªùi ƒë√∫ng
            st.session_state.sentence = generate_example_sentence(q["word"], q["type"], q["meaning"])

    if st.session_state.feedback:
        st.markdown(st.session_state.feedback)
        if st.session_state.sentence:
            st.info(f"**Example:** {st.session_state.sentence}")

        if st.button("‚û°Ô∏è Next Question"):
            st.session_state.index += 1
            st.session_state.feedback = ""
            st.session_state.sentence = ""
            st.session_state.direction = random.choice(["en-vi", "vi-en"])
            st.rerun()
    
    # Auto focus v√†o input field
    auto_focus_input()